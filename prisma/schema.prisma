// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url      = env("DATABASE_URL")
}
model School {
  id String @id @default(cuid()) // or use @default(uuid()) for UUID
  name      String
  logo      String?
  slug String @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt


  // students Student[]
  // classes  Class[]
  // parents Parent[]
  // streams Stream[]
  
  @@map("schools")
}

model Contact {
  id  String @id  @default(cuid())
  fullName String
  email String   @unique
  phone String
  school String @unique
  country String
  schoolPage String
  students Int
  role String
  media String
  message String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contacts")
}

model Class {
  id String @id  @default(cuid())
  title String
  slug String @unique
  // schoolId String
  // school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  streams Stream[]
  students      Student[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("classes")
}

model Stream {
  id String @id @default(cuid())
  title String @unique
  slug String @unique
  //  schoolId String
  // school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  classId String
  class Class @relation(fields: [classId], references: [id])
   students      Student[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("streams")

}

model Parent {
  id             String @id @default(cuid())
  title          String
  firstName      String
  lastName       String
  relationShip   String
  email          String   @unique
  NIN            String   @unique
  gender         String
  dob            DateTime
  phone          String    @unique
  nationality    String
  whatsapNo      String?
  imageUrl       String?
  contactMethod  String
  occupation     String
  address        String
  password       String
  //  schoolId String
  // school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  students      Student[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt


  @@map("parents")
}

model Student {
  id String @id @default(cuid())
  name String
  firstName String
  lastName String
  email String @unique
  parentId String
  classId String
  studentType String? @default("PV")
  streamId String
  password String
  imageUrl String?
  phone String?
  parentName String?
  classTitle String?
  streamTitle String?
  state String
  BCN String @unique
  nationality String
  religion String
  gender String
  dob DateTime
  rollNo String @unique
  regNo String @unique
  admissionDate DateTime
  address String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //  schoolId String
  // school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  parent Parent @relation(fields: [parentId], references: [id], onDelete: Cascade)
  class Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  stream Stream @relation(fields: [streamId], references: [id], onDelete: Cascade)

  @@map("students")
}

model Teacher {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  titla String
  firstName String
  lastName String
  email String @unique
  phone String @unique
  whatsappNo String?
  dateOfBirth DateTime?
  gender Gender
  imageUrl String?
  NIN     String   @unique

  password String?
  isActive Boolean @default(true)
  lastLogin DateTime?

  employeeId String @unique
  dateOfJoining DateTime
  designation String
  departName String?
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId String 


  mainSubject String?
  mainSubjectId String?
  qualification String

  subjects String[]
  classes String[]
  classIds String[]

  documents TeacherDocument[]

  address String
  nationality String?

  emergencyContactName String?
  emergencyContactPhone String?
  emergencyContactRelation String?

  experience Int?
  bio String? @db.Text
  skills String?

  // school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  // schoolId String

  attendance TeacherAttendance[]
  leaves TeacherLeave[]

  // event Event[]

@@map("teachers")
}

model Department {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  slug String @unique

  // school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  // schoolId String

  hodId String?
  hodName String?
  hodStartDate DateTime?

  teachers Teacher[]

  subjects Subject[]

  budget Float?
  budgetYear String?
  

  @@map("departments")
}

model Subject {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  code String 
  slug String @unique
  shortName String?

  category SubjectCategory
  type SubjectType
  passingMarks Int?
  totalMarks Int?


  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId String 
  departmentName String 

  // school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)  
  // schoolId String


  isActive Boolean @default(true)
  isOptional Boolean @default(false)
  hasTheory Boolean @default(true)
  hasPractical Boolean @default(false)

  labRequired Boolean @default(false)
   @@map("subjects")
}
enum SubjectCategory {
  CORE
  ELECTIVE
  ADDITIONAL
  VOCATIONAL
  LANGUAGE
  EXTRA_CURRICULAR
}

enum SubjectType {
  THEORY
  PRACTICAL
  BOTH
}
model TeacherDocument {
  id String @id @default(cuid())
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId String

  type DocumentType
  title String
  url String
  updatedAt DateTime @default(now())

  @@index([teacherId])
   @@map("teacherDocuments")
}

model TeacherAttendance {
  id String @id @default(cuid())
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId String

  date DateTime
  status AttendanceStatus
  checkIn DateTime?
  checkOut DateTime?
  note String?

  @@unique([teacherId, date])
   @@map("teacherAttendances")
}

model TeacherLeave {
  id String @id @default(cuid())
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId String

  startDate DateTime
  endDate DateTime
  type LeaveType
  reason String
  status LeaveStatus @default(PENDING)
  approvedBy String?
  approvedAt DateTime?

  @@index([teacherId])
   @@map("teacherLeaves")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum DocumentType {
  RESUME
  CERTIFICATE
  ID_PROOF
  QUALIFICATION
  CONTRACT
  OTHER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  ON_LEAVE
}

enum LeaveType {
  SICK
  CASUAL
  VACATION
  MATERNITY
  PATERNITY
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELED
}

